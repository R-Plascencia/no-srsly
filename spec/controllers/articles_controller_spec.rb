require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.
#
# Also compared to earlier versions of this generator, there are no longer any
# expectations of assigns and templates rendered. These features have been
# removed from Rails core in Rails 5, but can be added back in via the
# `rails-controller-testing` gem.

RSpec.describe Api::V1::ArticlesController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # Article. As you add validations to Article, be sure to
  # adjust the attributes here as well.
  let(:source) { FactoryBot.create(:source) }
  let(:article) { FactoryBot.create(:article, source_id: source.id) }
  let(:invalid_article) { Article.new }
  let(:valid_attributes) do
    {
      :title => 'New Title',
      :url => 'www.url.com',
      :source_id => source.id
    }
  end
  let(:invalid_attributes) do
    {
      :title => 'New Title',
      :url => 'www.url.com'
    }
  end

  describe 'GET #index' do
    it 'returns a success response' do
      get :index, params: {:source_id => source.id}
      expect(response).to be_success
    end
  end

  describe 'GET #show' do
    it 'returns a success response' do
      get :show, params: {:id => article.to_param, :source_id => source.id}
      expect(response).to be_success
    end
  end

  describe 'POST #create' do
    context 'with valid params' do
      it 'creates a new Article' do
        expect {
          post :create, params: valid_attributes
        }.to change(Article, :count).by(1)
      end

      it 'renders a JSON response with the new article' do
        post :create, params: valid_attributes
        expect(response).to have_http_status :created
        expect(response.content_type).to eq 'application/json'
      end
    end

    context 'with invalid params' do
      it 'renders a JSON response with errors for the new article' do

        post :create, params: invalid_attributes
        expect(response).to have_http_status :unprocessable_entity
        expect(response.content_type).to eq 'application/json'
      end
    end
  end

  describe 'PUT #update' do
    context 'with valid params' do
      let(:new_attributes) do
        {
          :title => 'Something Good',
          :url => 'www.url.com',
          :summary => 'something good happened',
          :source_id => source.id,
          :id => article.id
        }
      end

      it 'updates the requested article' do
        patch :update, params: new_attributes
        article.reload
        expect(article.title).to eq 'Something Good'
        expect(article.url).to eq 'www.url.com'
        expect(article.summary).to eq 'something good happened'
      end

      it 'renders a JSON response with the article' do
        article = FactoryBot.create(:article, source_id: source.id)

        put :update, params: new_attributes
        expect(response).to have_http_status :ok
        expect(response.content_type).to eq 'application/json'
      end
    end

    # context 'with invalid params' do
    #   let(:bad_attributes) do
    #     {
    #       :fuckingshit => 'FUUUUU',
    #       :source_id => source.id,
    #       :id => article.id
    #     }
    #   end

    #   it 'renders a JSON response with errors for the article' do
    #     patch :update, params: bad_attributes
    #     expect(response).to have_http_status :unprocessable_entity
    #     expect(response.content_type).to eq 'application/json'
    #   end
    # end
  end

  describe 'DELETE #destroy' do
    before {  }
    it 'destroys the requested article' do
      article = Article.create! valid_attributes
      expect {
        delete :destroy, params: {id: article.id, source_id: source.id}
      }.to change(Article, :count).by(-1)
    end

    it 'renders a JSON no-content response' do
      article = Article.create! valid_attributes
      delete :destroy, params: {id: article.id, source_id: source.id}
      expect(response).to have_http_status :no_content
    end
  end

end
